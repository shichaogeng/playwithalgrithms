优先队列
问题:
	求n个元素中前m个元素
		普通的算法,先排队再找出前m个元素,时间复杂度是O(NlogN)
		优先队列 OlogM

	入队
	出队
		最坏时间复杂度O(N2)
		优先对列O(NlogN)

最大堆
	父节点大于子节点
	完全二叉树	非最后一层必须最大值 最后一层在左侧

父节点i
左节点 2*i
右节点 2*i+1

如果要找父节点 i/2

heapify规则:完全二叉树最后一个非叶子节点的索引是count/2

将n个元素逐个insert插入空堆中,时间复杂度是O(NlogN)
heapify的方式转换为堆的时间复杂度是O(N)//一上来就抛弃小于arr.length/2的节点,只对大于它的进行shiftdown

使用0索引的方法
已经父节点i
    左子节点 2*+1
    右子节点 2*+2
已知子节点
    父节点 (i-1)/2